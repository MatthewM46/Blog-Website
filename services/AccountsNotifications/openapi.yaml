openapi: 3.0.0
info:
  title: Notification Service
  version: 1.0.0
  description: A notification service with JWT authentication.

paths:
  /new-post:
    post:
      summary: Notify on new post
      description: Endpoint to notify when a new post is created.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                author_id:
                  type: string
              required:
                - author_id
      tags:
        - eventHooks
      responses:
        200:
          description: Successful notification

  /new-comment:
    post:
      summary: Notify on new comment
      description: Endpoint to notify when a new comment is created.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                commenter_id:
                  type: string
                post_id:
                  type: string
                replied_comment_id:
                  type: string
              required:
                - commenter_id
                - post_id
      tags:
        - eventHooks
      responses:
        200:
          description: Successful notification

  /strike-account:
    post:
      summary: Notify on account strike
      description: Endpoint to notify when an account is striked.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account_id:
                  type: string
              required:
                - account_id
      tags:
        - eventHooks
      responses:
        200:
          description: Successful notification

  /banned-account:
    post:
      summary: Notify on banned account
      description: Endpoint to notify when an account is banned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account_id:
                  type: string
              required:
                - account_id
      tags:
        - eventHooks
      responses:
        200:
          description: Successful notification

  /new-advertisement:
    post:
      summary: Notify on new advertisement
      description: Endpoint to notify when a new advertisement is created for review.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ad_id:
                  type: string
              required:
                - ad_id
      tags:
        - eventHooks
      responses:
        200:
          description: Successful notification

  /ad-modification:
    post:
      summary: Notify on ad modification
      description: Endpoint to notify when an advertisement is modified.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                modification_type:
                  type: string
                  enum:
                    - "update"
                    - "delete"
                    - "extend"
                ad_id:
                  type: string
              required:
                - modification_type
                - ad_id
      tags:
        - eventHooks
      responses:
        200:
          description: Successful notification

  /notification-settings:
    post:
      summary: Set Notification Settings
      description: Endpoint to allow a user to configure their notification settings.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_post_followed_account:
                  type: boolean
                new_comment_on_my_post:
                  type: boolean
                new_reply_to_my_comment:
                  type: boolean
                new_ad_for_review:
                  type: boolean
                new_post_for_review:
                  type: boolean
                new_comment_for_review:
                  type: boolean
              required:
                - new_post_followed_account
                - new_comment_on_my_post
                - new_reply_to_my_comment
      tags:
        - notificationSettings
      responses:
        200:
          description: Notification settings updated successfully
        400:
          description: Bad Request - Malformed request or missing required fields
        500:
          description: Internal Server Error - Something went wrong on the server

  /search-users:
    get:
      summary: Real-time Search
      description: Endpoint to retrieve search results as the user types.
      parameters:
        - name: query
          in: query
          description: The partial search query entered by the user.
          required: true
          schema:
            type: string
      tags:
        - search
      responses:
        200:
          description: Successful search response.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                      description: The username of the user.
                    fullname:
                      type: string
                      description: The full name of the user.
                    bio:
                      type: string
                      description: The user's bio.
                    avatarURL:
                      type: string
                      format: uri
                      description: The URL of the user's avatar image.
        400:
          description: Bad Request - Missing or invalid query parameter.
        500:
          description: Internal Server Error - Something went wrong on the server.

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: user creates account
      operationId: createUser
      parameters:
        - name: Email
          in: query
          description: users email
          required: true
          schema:
            type: string
            
        - name: First Name
          in: query
          description: first name of user
          required: true
          schema:
            type: string
            
        - name: Last Name
          in: query
          description: The last name of user
          required: true
          schema:
            type: string

        - name: Password
          in: query
          description: users created password
          required: true
          schema:
            type: string

        - name: Password Again
          in: query
          description: Must match the above password
          required: true
          schema:
            type: string
      responses:
        201:
          description: successful user created
        
        400:
          description: passwords do not match each other
          
        412:
          description: field left empty
        
        409:
          description: email already in use, user not created
          
  /user/inputUserDB:
    post:
      tags:
        - user
      summary: inputs user into user DB
      description: updates DB of users with new given input arrays
      operationId: inputUserDB
      requestBody:
        description: inputs user object
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  user_id:
                    type: string
                  user_email:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                  user_password:
                    type: string
      responses:
        200:
          description: successful user added to DB
        400:
          description: user not added to DB
          
  /user/login:
    get:
      tags:
        - user
      summary: Logs a registered user into the system
      description: user enters email and password to login to the system
      parameters:
        - name: email
          in: query
          description: the registered email of user
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: the users password
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful user login, JWT returned
          headers:
            X-Expires-After:
              description: date in UTC when JWT expires or JWT does not match
              schema:
                type: string
                format: date-time
        400:
          description: invalid email or password
          
  /user/login/authentication:
    post:
      tags:
        - user
      summary: JWT created
      description: user is assigned a JWT on log in

      responses:
        200:
          description: JWT created
          content:
            application/json:
              schema:
                type: object
                properties:
                  JWT:
                    type: array
                    items:
                      type: object
                      properties:
                        header_alg: 
                          type: string
                          example: HS246
                        header_typ: 
                          type: string
                          example: JWT
                        payload_iss:
                          type: string
                          example: authenitcation server
                        payload_sub:
                          type: string
                          example: 1234567890
                        payload_name:
                          type: string
                          example: John Doe
                        payload_iat:
                          type: string
                          example: 1516239022
                        payload_exp:
                          type: string
                          example: 1516240055
                        signature:
                          type: string
                          example: HMACSHA256(
                                  base64UrlEncode(header) + "." +
                                  base64UrlEncode(payload),
                                  secret)

  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current user
      description: current user logs out of system
      responses:
        200:
          description: successful operation, JWT destroyed
          
  /user/update:
    put:
      tags:
        - user
      summary: update user info
      description: logged in user updates his account information
      parameters:
        - name: Email
          in: query
          description: users email
          required: false
          schema:
            type: string
            
        - name: First Name
          in: query
          description: first name of user
          required: false
          schema:
            type: string
            
        - name: Last Name
          in: query
          description: The last name of user
          required: false
          schema:
            type: string

        - name: Password
          in: query
          description: users created password
          required: false
          schema:
            type: string

        - name: Password Again
          in: query
          description: Must match the above password
          required: false
          schema:
            type: string
            
      responses:
        200: 
          description: user updates information
        400:
          description: invalid field
        
  /user/delete:
    delete:
      tags:
      - user
      summary: Delete user
      description: user deleted account, must be logged in
      parameters:
        - name: Email
          in: query
          description: users email
          required: true
          schema:
            type: string
        
        - name: password
          in: query
          description: users password
          required: true
          schema:
            type: string
      responses:
        200:
          description: user deleted
        400:
          description: invalid email or password
          
  /user/forogtpassword:
    post:
      tags:
        - user
      summary: reset password
      description: user forgot password and wants to reset it
      parameters:
        - name: Email
          in: query
          description: users email
          required: true
          schema:
            type: string
      responses:
        200:
          description: user reset password email sent
        400:
          description: invalid email


security:
  - JWT: []

components:
  securitySchemes:
    JWT:
      type: apiKey
      in: header
      name: Authorization
